---
import Nav from "../components/Nav.astro";
import { DESCRIPTION, MY_NAME, TITLE, TWITTER_HANDLE } from "../lib/constants";
import type { WebSite, WithContext } from "schema-dts";
import { SEO } from "astro-seo";
import Footer from "../components/Footer.astro";

export interface Props {
  title: string;
  description?: string;
  openGraphImage?: string;
  openGraphAlt?: string;
  pageType?: `narrow` | `normal` | "open";
  subtitle?: string;
  schema?: WithContext<any>;
  postData?: {
    date: string;
    lastUpdated: string;
  };
}

const {
  title,
  description = "",
  pageType = "",
  openGraphImage = "",
  openGraphAlt = "",
  subtitle = "",
  schema,
  postData,
} = Astro.props;

const mainClass = (() => {
  switch (pageType) {
    case "narrow":
      return "max-w-screen-sm";
    case "normal":
      return "max-w-[875px]";
    case "open":
      return "max-w-screen-lg";
    default:
      return "";
  }
})();

const defaultSchema: WithContext<WebSite> = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  url: import.meta.env.SITE_URL,
  name: TITLE,
  alternateName: subtitle,
  description: DESCRIPTION,
  author: {
    "@type": "Person",
    name: MY_NAME,
    url: import.meta.env.SITE_URL,
  },
};

const image =
  openGraphImage || import.meta.env.SITE_URL + "/default-open-graph.jpg";
const articleOgData = postData
  ? {
      publishedTime: postData.date,
      modifiedTime: postData.lastUpdated,
      authors: [MY_NAME],
    }
  : {};
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <link
      rel="preload"
      href="https://macarthur.me/fonts/inter-subset.woff2"
      as="font"
      type="font/woff2"
    />

    <link rel="icon" type="image/svg+xml" href="/favicon/favicon.ico" />
    <link rel="preconnect" href="https://unpkg.com" />
    <link rel="preload" href="https://unpkg.com" />
    <meta name="generator" content={Astro.generator} />
    <script defer data-domain="macarthur.me" src="/js/numbers.js"></script>

    <script
      type="application/ld+json"
      key="ld+json"
      set:html={JSON.stringify(schema || defaultSchema)}
    ></script>

    <SEO
      title={title ? `${title} | Alex MacArthur` : TITLE}
      description={description || DESCRIPTION}
      openGraph={{
        article: articleOgData,
        image: {
          alt: openGraphAlt || "open graph image",
        },
        optional: {
          siteName: "Alex MacArthur",
          description: description || DESCRIPTION,
        },
        basic: {
          title: title || TITLE,
          type: "website",
          image,
          url: Astro.request.url,
        },
      }}
      twitter={{
        creator: TWITTER_HANDLE,
      }}
      extend={{
        link: [
          { rel: "icon", href: "/favicon.ico" },
          {
            rel: "apple-touch-icon",
            sizes: "180x180" as unknown as DOMTokenList,
            href: "/favicon/apple-touch-icon.png",
          },
          {
            rel: "icon",
            type: "image/png",
            sizes: "32x32" as unknown as DOMTokenList,
            href: "/favicon/favicon-32x32.png",
          },
          {
            rel: "icon",
            type: "image/png",
            sizes: "16x16" as unknown as DOMTokenList,
            href: "/favicon/favicon-16x16.png",
          },
          {
            rel: "manifest",
            href: "/favicon/site.webmanifest",
          },
          {
            rel: "alternate",
            type: "application/rss+xml",
            title: "RSS 2.0 Feed",
            href: `${import.meta.env.SITE_URL}/rss/feed.xml`,
          },
        ],
        meta: [
          {
            name: "twitter:image",
            content: image,
          },
          { name: "twitter:title", content: title || TITLE },
          { name: "twitter:description", content: description || DESCRIPTION },
          { name: "twitter:card", content: "summary_large_image" },
          {
            name: "msapplication-TileColor",
            content: "#000000",
          },
          {
            name: "theme-color",
            content: "#000000",
          },
          {
            name: "msapplication-config",
            content: "/favicon/browserconfig.xml",
          },
        ],
      }}
    />
  </head>
  <body>
    <Nav />
    <main class={`px-4 md:px-6 mx-auto w-full ${mainClass}`}>
      <slot />
    </main>

    <Footer />

    <script>
      import "../scripts/link-tracking";
      import { listen } from "quicklink";

      listen();
    </script>

    <style is:global>
      @import "prismjs/themes/prism-okaidia.css";

      .slanted-text {
        font-style: oblique 3deg;
      }

      /** global typography adjustments */

      .italic,
      em,
      blockquote,
      i {
        font-variation-settings: 'slnt' -10 !important;
        font-style: oblique 10deg !important;
      }

      @font-face {
        font-family: 'Inter Variable';
        src: url('/fonts/inter-subset.woff2') format('woff2');
        font-weight: 1 999;
        font-style: oblique 0deg 10deg;
        font-display: swap;
      }

      * {
        letter-spacing: -0.025em;
      }

      h2 em {
        font-weight: inherit;
        color: inherit;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        @apply text-gray-800 font-medium;
      }

      h1, h2 {
        font-style: oblique 3deg;
      }

      h2 {

      }

      :not(h1, h2, h3, h4, h5, h6, pre, pre *) {
        @apply text-gray-600 font-light;
      }

      /** end global typography adjustments */

      nav {
        grid-area: nav;
      }

      main {
        grid-area: main;
      }

      form input,
      form textarea {
        @apply border border-gray-300 rounded-sm w-full px-2 py-2 text-base;
      }

      label {
        @apply mb-2 inline-block;
      }

      .password-wrapper {
        position: absolute;
        z-index: -1;
        opacity: 0;
      }

      .button,
      .jc-CommentBox-button {
        @apply border-2 text-white text-lg border-purple-500 rounded-3xl px-5 py-1 bg-purple-500 hover:bg-white hover:text-purple-500 transition-colors duration-200 cursor-pointer !important;
      }

      .button.light {
        @apply bg-transparent border-white text-white hover:text-purple-500 hover:bg-white !important;
      }

      .button.submit {
        @apply rounded-sm;
      }

      .button.large {
        @apply text-2xl;
      }

      .button svg {
        stroke: white;
      }

      .card {
        @apply border-2 border-gray-200 rounded-lg p-6 md:p-8;
      }

      *:focus-visible {
        outline: theme("colors.purple.500") auto 1px;
      }

      .prose {
        :not(h1, h2, h3, h4, h5, h6) > a{
          @apply relative no-underline;
            background: linear-gradient(
            to right,
            theme("colors.purple.600") 50%,
            theme("colors.purple.700") 50%
          );
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
        }

        a:after {
          content: '';
          left: 0;
          bottom: 0;
          width: 100%;
          height: 0;
          display: block;
          position: absolute;
          background: theme('colors.purple.500');
          transform: translateY(100%) skew(-5deg);
          transition: all 0.08s ease-out;
          @apply bg-gradient-to-r from-purple-500 to-purple-600;
        }

        a:hover:after {
          height: .2em;
        }
      }
    </style>
  </body>
</html>
