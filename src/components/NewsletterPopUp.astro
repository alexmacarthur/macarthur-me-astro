---
import CloseIcon from './CloseIcon.astro';
import NewsletterForm from './NewsletterForm.astro';
import NewsletterIcon from './NewsletterIcon.astro';

export interface Props {
  heading?: string;
  description?: string;
  isHorizontal?: boolean;
}

const {
  heading = "Get emailed about new posts.",
  description = "No spam. Unsubscribe whenever.",
} = Astro.props;
---

<div class="translate-y-full transition duration-300 ease-in-out fixed bottom-0 translate-x-1/2 md:translate-x-0 right-1/2 md:right-[5vw] newsletter-popup-wrapper">
<div
  class={`w-80 bg-gradient-to-br from-purple-600 to-purple-600 p-6 shadow-box purple-shadow-box max-w-full`}>
    <button class="toggleNewsletter -z-10 absolute shadow-box no-padding purple-shadow-box top-0 right-0 bg-purple-600 flex items-center gap-3 whitespace-nowrap !p-3 !pb-6">
        <div class="icon newsletter-icon ">
            <NewsletterIcon />
        </div>
        <h5 class="text-white mb-0 font-semibold inline-block">
            {heading}
        </h5>

    </button>
    <div class={`mb-5 md:col-span-3`}>
        <span class="text-purple-200 leading-snug block">
            {description}
        </span>
    </div>

    <NewsletterForm />
</div>
</div>

<style>
    .toggleNewsletter {
        --original-transform: translateY(calc(-100% + 10px));

        transition: transform 0.15s ease-in-out;
        transform: var(--original-transform);

        &:hover {
            transform: translateY(calc(-100% + 7px));
        }

        &.disable-hover {   
            transition: none;
            transform: var(--original-transform);
        }

        .icon {
            @apply text-white;
            transition: opacity 0.2s ease-in-out;
        }

        .newsletter-icon {
            opacity: 1;
        }

        .close-icon {
            opacity: 0
        }

        &.is-open {
            .newsletter-icon {
                opacity: 0;
            }

            .close-icon {
                opacity: 1;
            }
        }
    }
</style>

<script>
    const toggles = document.querySelectorAll('.toggleNewsletter') as NodeListOf<HTMLElement>;

    let isOpen = false;

    function handleToggle(e) {
        const toggle = e.currentTarget as HTMLElement;
        const parent = toggle.closest('.newsletter-popup-wrapper') as HTMLElement;

        toggle.classList.toggle('disable-hover', !isOpen);
        parent.classList.toggle('translate-y-full', isOpen);
        toggle.classList.toggle('is-open', !isOpen);

        isOpen = !isOpen;
    }
    
    document.addEventListener('astro:before-preparation', () => {
        toggles.forEach(toggle => {
            toggle.removeEventListener('click', handleToggle);
        });
    });
    
    document.addEventListener('astro:page-load', () => {
        toggles.forEach(toggle => {
            toggle.addEventListener('click', handleToggle);
        });
    });
</script>
