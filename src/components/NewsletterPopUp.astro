---
import CloseIcon from './CloseIcon.astro';
import NewsletterForm from './NewsletterForm.astro';
import NewsletterIcon from './NewsletterIcon.astro';

export interface Props {
  heading?: string;
  description?: string;
  isHorizontal?: boolean;
}

const {
  heading = "Get emailed about new posts.",
  description = "No spam. Might be irregular. Unsubscribe whenever. Won't be hurt.",
} = Astro.props;
---
    <div class="translate-y-full transition duration-300 ease-in-out fixed bottom-0 translate-x-1/2 md:translate-x-0 right-1/2 md:right-[5vw] newsletter-popup-wrapper">
        <button class="toggleNewsletter -z-10 absolute shadow-box no-padding purple-shadow-box top-0 right-0 bg-purple-600 flex items-center whitespace-nowrap !pt-1 !pb-3 !px-5 md:!pt-2 md:!pb-4 w-full">
            <div class="relative w-5 h-6 md:w-6 md:h-8 flex items-center justify-center icon-wrapper overflow-hidden mr-3">
                <div class="icon newsletter-icon">
                    <NewsletterIcon />
                </div>
            </div>
            
            <h5 class="text-white mb-0 font-semibold h-8 flex items-center">
                {heading}
            </h5>

            <div class="relative w-6 h-8 flex items-center justify-center ml-auto">
                <div class="icon close-icon">
                    <CloseIcon />
                </div>
            </div>
        </button>
        <div
        class={`w-80 bg-gradient-to-br from-purple-600 to-purple-600 p-6 !pt-0 shadow-box purple-shadow-box max-w-full`}>
            <div class={`mb-5 md:col-span-3`}>
                <span class="text-purple-200 leading-snug block">
                    {description}
                </span>
            </div>

            <NewsletterForm disableButtonHover={true} />
        </div>
    </div>

<style>
    .toggleNewsletter {
        --original-transform: translateY(calc(-100% + 10px));
        transition: all 0.15s ease-in-out;

        @keyframes bump {
            0% {
                transform: none;
            }

            50% {
                transform: translateY(calc(-100% + 3px));
            }

            100% {
                transform: var(--original-transform)
            }
        }
        
        &.initial-bump {
            animation: bump 0.5s ease-in-out 1;
            transform: var(--original-transform);
        }

        &:hover {   
            transform: translateY(calc(-100% + 7px));
        }

        &.disable-hover {   
            transform: var(--original-transform);
        }

        .icon-wrapper {
            transition: all 0.20s ease-in-out .05s, opacity 0.25s ease-in-out 0s;
        }

        .icon {
            @apply text-white absolute;
            transition: opacity 0.2s ease-in-out;
        }

        .newsletter-icon {
            opacity: 1;
        }

        .close-icon {
            opacity: 0;
        }


        &:focus-visible {
            outline: none;
        }

        &.is-open {
            .icon-wrapper {
                width: 0;
                opacity: 0;
                margin-right: 0;
            }

            .close-icon {
                opacity: 1;
            }
        }
    }
</style>

<script>
    function getToggles() {
        return document.querySelectorAll('.toggleNewsletter') as NodeListOf<HTMLElement>;
    }

    let isOpen = false;

    function closePopup(event) {
        if(event.key.toLowerCase() === 'escape' && isOpen) {
            event.preventDefault();
            
            const parent = document.querySelector('.newsletter-popup-wrapper') as HTMLElement;
            const toggle = document.querySelector('.toggleNewsletter') as HTMLElement;
    
            toggle.classList.remove('disable-hover');
            parent.classList.add('translate-y-full');
            toggle.classList.remove('is-open');
            isOpen = false;
        }
    }

    function handleToggle(e) {
        const toggle = e.currentTarget as HTMLElement;
        const parent = toggle.closest('.newsletter-popup-wrapper') as HTMLElement;

        toggle.classList.toggle('disable-hover', !isOpen);
        parent.classList.toggle('translate-y-full', isOpen);
        toggle.classList.toggle('is-open', !isOpen);

        isOpen = !isOpen;
    }
    
    document.addEventListener('astro:before-preparation', () => {
        document.removeEventListener('keydown', closePopup);
        
        getToggles().forEach(toggle => {
            toggle.removeEventListener('click', handleToggle);
        });
    });
    
    document.addEventListener('astro:page-load', () => {
        document.addEventListener('keydown', closePopup);

        console.log('adding')

        getToggles().forEach(toggle => {

            console.log('contains', toggle.classList.contains('initial-bump'));
            toggle.classList.remove('initial-bump');

            requestAnimationFrame(() => {
                requestAnimationFrame(() => {
                    toggle.classList.add('initial-bump');
                });
            })
        

            toggle.addEventListener('click', handleToggle);
        });
    });
</script>
