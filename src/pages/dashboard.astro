---
import ArrowTopRightOnSquare from "astro-heroicons/outline/ArrowTopRightOnSquare.astro";
import Counter from "../components/Counter.astro";
import Title from "../components/Title.astro";
import Layout from "../layouts/Layout.astro";
import contentService from "../lib/ContentService";
import ghService from "../lib/GitHubService";
import gsService from "../lib/GoogleSearchService";
import npmService from "../lib/NpmService";
import stravaService from "../lib/StravaService";
import wpService from "../lib/WordPressService";
import domainAuthorityService from "../lib/DomainAuthorityService";

type State = {
  title: string;
  link?: string;
  subTitle: string;
  value: any;
};

const stats: State[] = [
  {
    title: "Total Blog Posts",
    link: "https://macarthur.me/posts",
    subTitle:
      "Sign up for <a href='/newsletter' target='_blank'>my newsletter</a> to get new ones in your inbox.",
    value: contentService.getTotalPostCount(),
  },
  {
    title: "Total Words Written",
    link: "https://macarthur.me/posts",
    subTitle: "More is not necessarily better (Proverbs 10:14).",
    value: contentService.getTotalWordCount(),
  },
  {
    title: "Total GitHub Stars",
    link: "https://github.com/alexmacarthur",
    subTitle: "If you haven't starred my repos, get on that.",
    value: ghService.getTotalStars(),
  },
  {
    title: "Total GitHub Followers",
    link: "https://github.com/alexmacarthur",
    subTitle: "Do it yourself today, for free.",
    value: ghService.getFollowerCount(),
  },
  {
    title: "Domain Authority",
    subTitle:
      "As determined by <a href='https://moz.com/domain-analysis' target='_blank'>Moz</a>.",
    value: domainAuthorityService.getAuthority(),
  },
  {
    title: "Links in <em>JavaScript Weekly</em>",
    link: "https://www.google.com/search?q=site%3Ajavascriptweekly.com+%22alex+macarthur%22",
    subTitle: "Mostly just blog posts, but the occassional project too.",
    value: gsService.getJsWeeklyTotalResults(),
  },
  {
    title: "Articles Published on <em>CSS Tricks</em>",
    link: "https://css-tricks.com/author/alexmacarthur",
    subTitle: "Fun.",
    value: Promise.resolve(3),
  },
  {
    title: "Blog Posts Published on Frontend Masters",
    link: "https://frontendmasters.com/blog/author/alexmacarthur",
    subTitle: "Also fun.",
    value: Promise.resolve(2),
  },
  {
    title: "Total Miles Run",
    link: "https://www.strava.com/athletes/27922666",
    subTitle: "As tracked by Strava since October, 2016.",
    value: stravaService.getTotalRunMiles(),
  },
  {
    title: "Total npm Downloads",
    link: "https://www.npmjs.com/~alexmacarthur",
    subTitle: "Mainly random open source JavaScript packages.",
    value: npmService.getTotalDownloads(),
  },
  {
    title: "Total WordPress Plugin Downloads",
    link: "https://profiles.wordpress.org/alexmacarthur/#content-plugins",
    subTitle: "Not a huge focus anymore, but still worth bragging about.",
    value: wpService.getPluginDownloadCount(),
  },
  {
    title: "How Many Inches Tall I've Grown",
    subTitle: "Expecting a growth spurt any day now.",
    value: Promise.resolve(68),
  },
  {
    title: "Enneagram Number",
    subTitle: "Probs obvious given that I have a personal dashboard.",
    value: Promise.resolve(3),
  },
];

await Promise.allSettled(stats.map((stat) => stat.value));

for (let stat of stats) {
  let result: string | number | null = null;

  try {
    result = await stat.value;

    if (!result) {
      console.log(`DASHBOARD - Stat value was empty: ${stat.title}, ${result}`);
      stat.value = null;
      continue;
    }

    stat.value = Number(result).toLocaleString();
  } catch (e) {
    console.log(
      `DASHBOARD - Could not get stat value: ${stat.title}, ${result}`,
    );
    stat.value = null;
  }
}
---

<Layout
  title="Personal Dashboard"
  pageType={"narrow"}
  shouldIndexForSearch={false}
>
  <Title>Dashboard</Title>

  <div class="post-content mx-auto prose max-w-none md:prose-lg mb-12">
    <p>
      The vanity metrics that matter most to me. The majority of these
      statistics are sourced from third-party APIs, updated every two hours or
      whenever my site is rebuilt.
    </p>
  </div>

  <ul class="grid grid-cols-1 md:grid-cols-2 gap-8">
    {
      stats
        .filter((s) => !!s.value)
        .map((stat) => {
          return (
            <li>
              <div class="flex items-center">
                <h2 set:html={stat.title} />

                {stat.link && (
                  <a
                    href={stat.link}
                    class="inline-block ml-3"
                    target="_blank"
                    rel="noreferrer"
                  >
                    <ArrowTopRightOnSquare class="h-4 w-4" />
                  </a>
                )}
              </div>
              <span
                class="text-sm italic text-gray-500 block mb-3 child-link:text-purple-600"
                set:html={stat.subTitle}
              />
              <Counter
                value={String(stat.value)}
                classes="text-4xl md:text-5xl font-black"
              />
            </li>
          );
        })
    }
  </ul>
</Layout>
