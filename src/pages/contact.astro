---
import Layout from "../layouts/Layout.astro";
import Title from "../components/Title.astro";
---

<Layout title="Contact Me" pageType="narrow">
  <Title>Contact Me</Title>

  <div class="prose lg:prose-lg mb-12 mx-auto">
    <p>
      If you have a question about something I've built or have an issue with me
      at a deep, personal level, get in touch!
    </p>
  </div>

  <div class="mx-auto max-w-xl">
    <form id="contactForm" name="contact" method="post" action="/api/email">

      <div class="input-wrapper">
        <p class="mb-4 password-wrapper">
          <label class="block">
            Password:
            <br />
            <input
              type="text"
              name="password"
              tab-index="-1"
              auto-complete="off"
            />
          </label>
        </p>

        <p class="mb-4">
          <label class="block">
            Your name:
            <br />
            <input required type="text" name="name" />
          </label>
        </p>

        <p class="mb-4">
          <label class="block">
            Your email:
            <br />
            <input required type="email" name="email" />
          </label>
        </p>

        <p class="mb-4">
          <label class="block">
            Message:
            <br />
            <textarea required name="message" rows={4}></textarea>
          </label>
        </p>
      </div>

      <div class="flex flex-col md:flex-row justify-between md:items-center mt-2 gap-5 py-2">
        <p class="my-2">
          <button type="submit" class="button">Send</button>
        </p>

        <div>
          <span
            id="message"
            style="display: none;"
            class={"block md:text-base bg-gray-100 py-2 text-gray-800 px-3 rounded-md text-center"}
          >
            Something went wrong!
          </span>
        </div>
      </div>
    </form>
  </div>
</Layout>

<style>
  .is-disabled {
    opacity: 0.6;
    pointer-events: none;
  }

  .is-error {
    background: var(--color-red-200);
    color: var(--color-red-700);
  }

  .is-success {
    background: var(--color-green-200);
    color: var(--color-green-700);
  }
</style>

<script>
  const form = document.getElementById("contactForm") as HTMLFormElement;
  const inputWrapper = form.querySelector(".input-wrapper") as HTMLDivElement;
  const submitButton = form.querySelector(
    "button[type=submit]"
  ) as HTMLButtonElement;
  const messageEl = document.getElementById("message") as HTMLSpanElement;
  let timer = 0;

  const getTimeInMilliseconds = (): number => new Date().getTime();

  const getInputs = (): HTMLInputElement[] => {
    return Array.from(form.querySelectorAll("input, textarea"));
  };

  const setStartTime = () => {
    timer = getTimeInMilliseconds();
    removeSetStartTime();
  };

  const removeSetStartTime = () => {
    getInputs().forEach((input) => {
      input.removeEventListener("focus", setStartTime);
    });
  };

  const setValidationMessage = (message: string, status: `error` | `info` | `success` = "info") => {
    messageEl.innerHTML = message;
    messageEl.style.display = "block";
    messageEl.classList.remove("is-error", "is-success");

    if (status === "error") {
      messageEl.classList.add("is-error");
      return;
    }

    if(status === "success") {
      messageEl.classList.add("is-success");
      return;
    }
  };

  const onSubmitSuccess = () => {
    form.reset();
    setValidationMessage("Message successfully sent!", "success");
    setCanSubmit(true);
  };

  const setIsSubmitting = () => {
    setValidationMessage("Transporting your message through Internet tubes...", "info");
    setCanSubmit(false);
  };

  const setCanSubmit = (canSubmit: boolean) => {
    if (canSubmit) {
      inputWrapper.classList.remove("is-disabled");
      submitButton.classList.remove("is-disabled");
      submitButton.removeAttribute("disabled");
      return submitButton.removeAttribute("disabled");
    }

    inputWrapper.classList.add("is-disabled");
    submitButton.classList.add("is-disabled");
    submitButton.setAttribute("disabled", "true");
  };

  getInputs().forEach((input) => {
    input.addEventListener("focus", setStartTime);
  });

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const differenceInSeconds: number =
      (getTimeInMilliseconds() - timer) / 1000;

    if (differenceInSeconds < 3) {
      onSubmitSuccess();
      return;
    }

    setIsSubmitting();

    try {
      const formData = new FormData(e.target as HTMLFormElement);

      await fetch(
        `${import.meta.env.PUBLIC_MACARTHUR_API_BASE_URL}/contact`,
        {
          keepalive: true,
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            "x-completion-time": String(differenceInSeconds),
            "x-is-trusted": e.isTrusted ? "1" : "0",
          },
          body: new URLSearchParams(formData as any).toString(),
        }
      );

      onSubmitSuccess();
    } catch(e) {
      setCanSubmit(true);

      setValidationMessage(`Something failed. Email me instead: <a style="color: inherit; font-weight: 500;" href="mailto:contact@macarthur.me">contact@macarthur.me</a>`, "error");
    }
  });
</script>
