---
import type { BlogPosting, WithContext } from "schema-dts";
import Bio from "../../components/Bio.astro";
import DateFormatter from "../../components/DateFormatter.astro";
import Feedback from "../../components/Feedback.astro";
import Title from "../../components/Title.astro";
import ViewCount from "../../components/ViewCount.astro";
import Layout from "../../layouts/Layout.astro";
import cmsService from "../../lib/CMSService";
import { MY_NAME } from "../../lib/constants";
import type { BlogPost } from "../../types/types";

export async function getStaticPaths() {
  return (await cmsService.getAllPosts()).map((post) => ({
    params: { slug: post.slug },
  }));
}

const { slug } = Astro.params;
const post = (await cmsService.getPost(slug as string)) as BlogPost;

let postSchema: WithContext<BlogPosting> = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  datePublished: post.date,
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.request.url,
  },
  headline: post.title,
  isFamilyFriendly: true,
  description: post.description,
  image: post.openGraphImage,
  author: {
    "@type": "Person",
    name: MY_NAME,
    url: import.meta.env.SITE_URL,
  },
};

if (post.subtitle) {
  postSchema.alternativeHeadline = post.subtitle;
}

if (post.lastUpdated) {
  postSchema.dateModified = post.lastUpdated;
}
---

<Layout
  title={post.title}
  pageType={"normal"}
  schema={postSchema}
  postData={{
    date: post.date,
    lastUpdated: post.lastUpdated,
  }}
>
  <Title headingClasses={"text-3xl md:text-6xl"}>
    {post.title}
  </Title>

  <div class="flex gap-4 mb-6 -mt-6 md:-mt-10">
    <DateFormatter
      date={post.date}
      prettyDate={post.prettyDate}
      className="inline-block"
    >
      {post.lastUpdated && "Originally posted on"}
    </DateFormatter>

    <ViewCount count={""} slug={post.slug} disableAnimation={true} />
  </div>

  <div class="prose lg:prose-md mx-auto" set:html={post.html} />

  <Feedback slug={post.slug} />

  <Bio />
</Layout>
