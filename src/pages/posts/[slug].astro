---
import type { BlogPosting, WithContext } from "schema-dts";
import JamComments from "@jam-comments/astro";
import Bio from "../../components/Bio.astro";
import DateFormatter from "../../components/DateFormatter.astro";
import Feedback from "../../components/Feedback.astro";
import Title from "../../components/Title.astro";
import ViewCount from "../../components/ViewCount.astro";
import Layout from "../../layouts/Layout.astro";
import { MY_NAME } from "../../lib/constants";
import { getCurrentPath } from "../../utils";
import SignupForm from "../../components/SignupForm.astro";
import contentService, { computeDescription } from "../../lib/ContentService";

export async function getStaticPaths() {
  return (await contentService.getAllPosts()).map((post) => {
    return {
      params: { slug: post.slug },
    };
  });
}

const { slug } = Astro.params;

const post = await contentService.getPost(slug as string);
const computedDescription = computeDescription(post);

let postSchema: WithContext<BlogPosting> = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  datePublished: post.published_at,
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.request.url,
  },
  headline: post.title,
  isFamilyFriendly: true,
  description: computedDescription,
  image: post.og_image || post.feature_image,
  author: {
    "@type": "Person",
    name: MY_NAME,
    url: import.meta.env.SITE_URL,
  },
};

if (post.updated_at) {
  postSchema.dateModified = post.updated_at;
}
---

<Layout
  title={post.title}
  pageType={"normal"}
  schema={postSchema}
  description={computedDescription}
  openGraphImage={post.og_image || post.feature_image}
  openGraphAlt={post.feature_image_caption}
  postData={{
    date: post.published_at,
    lastUpdated: post.updated_at,
  }}
>
  <Title headingClasses={"text-3xl md:text-6xl"} subtitle={post.custom_excerpt}>
    {post.title}
  </Title>

  <div
    class={`flex items-start gap-4 mb-6 ${post.custom_excerpt ? "" : "-mt-4"}`}
  >
    <div class="flex flex-wrap gap-x-3">
      <DateFormatter date={post.published_at} className="inline-block" />

      <small>/</small>

      <ViewCount value={""} slug={post.slug} disableAnimation={true} />
    </div>
  </div>

  <div class="prose lg:prose-lg mx-auto" set:html={post.html} />

  <Feedback slug={post.slug} />

  <SignupForm isHorizontal={true} />

  <Bio />

  <JamComments path={getCurrentPath(Astro)} />

  <script>
    const observer = new IntersectionObserver((entries, o) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            entry.target.classList.add("is-visible");
          }, 500);
          observer.unobserve(entry.target);
        }
      });
    });

    document.querySelectorAll(".code-block").forEach((code) => {
      observer.observe(code);
    });
  </script>

  <style is:global>
    @keyframes slide {
      0% {
        transform: translateX(0);
      }

      50% {
        transform: translateX(-0.5rem);
      }

      100% {
        transform: translateX(0);
      }
    }

    .code-block:after {
      display: block;
      content: "scroll â†’";
      @apply text-gray-400 text-sm -mt-1 text-right;
    }

    .code-block.is-visible:after {
      animation: slide 0.75s infinite ease-in-out alternate;
      animation-iteration-count: 2;
    }

    @media screen(sm) {
      .code-block:after {
        display: none;
      }
    }

    .kg-embed-card iframe {
      @apply w-full mx-auto;
    }
  </style>
</Layout>
