---
import type { GetStaticPaths } from "astro";
import type { BlogPosting, WithContext } from "schema-dts";
import JamComments from "@jam-comments/astro";
import Bio from "../../components/Bio.astro";
import DateFormatter from "../../components/DateFormatter.astro";
import Feedback from "../../components/Feedback.astro";
import Title from "../../components/Title.astro";
import ViewCount from "../../components/ViewCount.astro";
import Layout from "../../layouts/Layout.astro";
import { MINIMUM_VIEW_COUNT, MY_NAME } from "../../lib/constants";
import { getCurrentPath, hasPromotion } from "../../utils";
import SignupForm from "../../components/SignupForm.astro";
import contentService, { computeDescription } from "../../lib/ContentService";
import analyticsService from "../../lib/AnalyticsService";
import PromoSlice from "../../components/PromoSlice.astro";
import ButtonLink from "../../components/ButtonLink.astro";

interface Params {
  slug: string;
}

export async function getStaticPaths() {
  return (await contentService.getAllPosts()).map((post) => {
    return {
      params: { slug: post.slug },
    };
  });
}

const { slug: postSlug } = Astro.params as unknown as Params;

const [post, viewData] = await Promise.all([
  contentService.getPost(postSlug),
  analyticsService.getPageViews(postSlug),
]);
const [viewStr, viewNum] = viewData;
const computedDescription = computeDescription(post);

let postSchema: WithContext<BlogPosting> = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  datePublished: post.published_at,
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.request.url,
  },
  headline: post.title,
  isFamilyFriendly: true,
  description: computedDescription,
  image: post.og_image || post.feature_image,
  author: {
    "@type": "Person",
    name: MY_NAME,
    url: import.meta.env.SITE_URL,
  },
};

if (post.updated_at) {
  postSchema.dateModified = post.updated_at;
}
---

<Layout
  title={post.title}
  ogTitle={post.meta_title}
  pageType={"normal"}
  schema={postSchema}
  description={computedDescription}
  openGraphImage={post.og_image || post.feature_image}
  openGraphAlt={post.feature_image_caption}
  canonicalUrl={post.canonical_url}
  postData={{
    date: post.published_at,
    lastUpdated: post.updated_at,
  }}>
  <ButtonLink
    href="/posts"
    withArrow={true}
    arrowDirection="left"
    classes="mb-2">
    Back to All Posts
  </ButtonLink>

  <Title
    headingClasses={"text-3xl md:text-6xl mb-5"}
    subtitle={post.custom_excerpt}
    transitionName={post.slug}>
    {post.title}
  </Title>

  <div
    class={`flex items-start gap-4 mb-6 ${post.custom_excerpt ? "" : "-mt-4"}`}>
    <div class="flex flex-wrap gap-x-3">
      <DateFormatter date={post.published_at} className="inline-block" />

      {
        viewNum && viewNum > MINIMUM_VIEW_COUNT && (
          <>
            <small>/</small>
            <ViewCount
              value={viewStr}
              slug={post.slug}
              disableAnimation={true}
            />
          </>
        )
      }
    </div>
  </div>

  <div class="prose lg:prose-lg mx-auto" set:html={post.html} />

  <div class="mt-12">
    {hasPromotion(post) ? <PromoSlice /> : <Feedback slug={post.slug} />}
  </div>

  <div
    class="my-6 grid grid-cols-1 sm:grid-cols-5 gap-8 pt-10 pb-8 w-screen max-w-6xl px-6 transform translate-x-[-50%] left-[50%] relative">
    <div class="grid place-items-center p-6 sm:col-span-2">
      <Bio />
    </div>

    <div class="sm:col-span-3">
      <SignupForm isHorizontal={true} />
    </div>
  </div>

  <div class="max-w-3xl mx-auto">
    <h5 class="text-2xl font-semibold slanted-text">Leave a Free Comment</h5>
    <JamComments path={getCurrentPath(Astro)} />
  </div>

  <script>
    const observer = new IntersectionObserver((entries, o) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            entry.target.classList.add("is-in-view");
          }, 500);
          observer.unobserve(entry.target);
        }
      });
    });

    document.querySelectorAll(".code-block-wrapper").forEach((code) => {
      const codeTag = code.querySelector("code") as HTMLElement;

      const { paddingLeft, paddingRight } = getComputedStyle(code);
      const parentWidth =
        (code as HTMLElement).offsetWidth -
        parseInt(paddingLeft) -
        parseInt(paddingRight);

      if (codeTag.offsetWidth > parentWidth) {
        code.classList.add("is-visible");
      }

      observer.observe(code);
    });
  </script>

  <style is:global>
    @keyframes slide {
      0% {
        transform: translateX(0);
      }

      50% {
        transform: translateX(-0.5rem);
      }

      100% {
        transform: translateX(0);
      }
    }

    .code-block {
      @apply relative my-4 p-5 !important;
      content-visibility: auto;
      contain-intrinsic-size: auto 275px;
    }

    .code-block-wrapper {
      @apply relative overflow-x-auto;
    }

    .code-block-wrapper:after {
      display: block;
      content: "scroll â†’";
      opacity: 0;
      transition: opacity 0.25s ease-in-out;
      @apply absolute text-gray-400 text-sm;
      position: absolute;
      bottom: -0.225rem;
      right: 0.25rem;
      z-index: 1;
    }

    .code-block-wrapper.is-visible .code-block {
      @apply mb-6 !important;
    }

    .code-block-wrapper.is-visible:after {
      opacity: 1;
    }

    .code-block-wrapper.is-in-view:after {
      animation: slide 0.75s infinite ease-in-out alternate;
      animation-iteration-count: 2;
    }

    .kg-embed-card iframe {
      @apply w-full mx-auto;
    }
  </style>
</Layout>
